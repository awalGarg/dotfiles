#!/usr/bin/env python3

# filename: i3-workspace-menu
# author: Awal Garg <i3-workspace-menu@awalgarg.me>
# license: wtfpl

from subprocess import Popen, PIPE, DEVNULL
import json
import sys

MODE_MOVE = 'move'
MODE_SWAP = 'swap'
MODE_FOCUS = 'focus'
MODE_RENAME = 'rename'

WORKSPACE_NAME_SUGGESTIONS = set(['browse', 'misc', 'work', 'media'])

def main(mode):
    workspaces = i3_get('workspaces')

    filtered_suggestions = list(WORKSPACE_NAME_SUGGESTIONS - set(map(lambda w: w['name'], workspaces)))

    if mode == MODE_RENAME:
        suggestion, new_workspace_name = get_user_choice(filtered_suggestions, 'i3-rename')
        if suggestion or new_workspace_name:
            i3_rename_workspace(suggestion or new_workspace_name)
        return

    unfocused_workspaces = [ workspace for workspace in workspaces if not workspace['focused'] ]
    filtered_workspaces = unfocused_workspaces

    if mode == MODE_SWAP:
        focused_workspace = [ workspace for workspace in workspaces if workspace['focused'] ][0]
        filtered_workspaces = [ workspace for workspace in filtered_workspaces if workspace['output'] != focused_workspace['output'] ]

    if mode != MODE_SWAP:
        filtered_workspaces += filtered_suggestions

    (workspace_or_suggestion, new_workspace_name) = get_user_choice(filtered_workspaces, f'i3-{mode}', lambda w: w if type(w) == str else format_i3_workspace(w))

    if mode == MODE_SWAP:
        if type(workspace_or_suggestion) != dict:
            return

        swap_target_workspace = workspace_or_suggestion
        swap_target_output = swap_target_workspace['output']
        workspace_visible_on_swap_target_output = [ workspace for workspace in workspaces if workspace['output'] == swap_target_output and workspace['visible'] ][0]

        i3_move_to_output(swap_target_workspace['output'])
        i3_focus_workspace(swap_target_workspace['name'])
        i3_move_to_output(focused_workspace['output'])
        i3_focus_workspace(workspace_visible_on_swap_target_output['name'])
        i3_focus_workspace(swap_target_workspace['name'])
    else:
        target_workspace_name = (
                new_workspace_name
                or type(workspace_or_suggestion) == str and workspace_or_suggestion
                or type(workspace_or_suggestion) == dict and workspace_or_suggestion['name']
        )

        if not target_workspace_name:
            return

        if mode == MODE_MOVE:
            i3_move_to_workspace(target_workspace_name)
        elif mode == MODE_FOCUS:
            i3_focus_workspace(target_workspace_name)

def i3_get(resource_name):
    raw_json = Popen(['i3-msg', '-t', 'get_' + resource_name], stdout=PIPE).communicate()[0]
    return json.loads(raw_json)

def i3_command(command):
    assert Popen(['i3-msg'] + command).wait() == 0

def i3_move_to_workspace(workspace_name):
    i3_command(['move', 'container', 'to', 'workspace', workspace_name])

def i3_focus_workspace(workspace_name):
    i3_command(['workspace', workspace_name])

def i3_rename_workspace(new_workspace_name):
    i3_command(['rename', 'workspace', 'to', new_workspace_name])

def i3_move_to_output(output_name):
    i3_command(['move', 'workspace', 'to', 'output', output_name])

def format_i3_workspace(workspace):
    return '{name} | {visibility_status} on {output} {focused_status} {urgency_status}'.format(
                name=workspace.get('name', ''),
                visibility_status='Visible' if workspace.get('visible', False) else 'Backgrounded',
                output=workspace.get('output', '<unknown output>'),
                focused_status='[focused]' if workspace.get('focused') else '[not focused]' if workspace.get('visible', False) else '',
                urgency_status='[urgent]' if workspace.get('urgent', False) else '',
                ).strip()

def get_user_choice(available_choices, menu_hint, format_choice=str):
    menu_command = ['dmenu', '-i', '-p', menu_hint, '-sb', '#333', '-nb', '#222', '-l', '20', '-fn', 'Inconsolata']
    formatted_choices = [ format_choice(choice) for choice in available_choices ]
    menu_proc = Popen(menu_command, stdin=PIPE, stdout=PIPE, stderr=DEVNULL)
    menu_proc_stdout = menu_proc.communicate('\n'.join(formatted_choices).encode())[0].decode()
    user_choice_str = menu_proc_stdout.strip().split('\n')[0]
    if not user_choice_str:
        return (None, None)
    try:
        return (available_choices[formatted_choices.index(user_choice_str)], None)
    except (IndexError, ValueError):
        return (None, user_choice_str)

if __name__ == '__main__':
    for mode in [ MODE_FOCUS, MODE_MOVE, MODE_SWAP, MODE_RENAME ]:
        if f'--mode={mode}' in sys.argv:
            main(mode)
            break
    else: main(MODE_FOCUS)
