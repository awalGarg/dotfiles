#!/usr/bin/env python3

# filename: browser-menu
# author: Awal Garg <browser-menu@awalgarg.me>
# license: wtfpl

import os
import sys
from pathlib import Path
from subprocess import Popen, PIPE, DEVNULL

def browser_firefox(profile_dir_path, url=None):
    if not url:
        url = 'about:newtab'
    return ['firefox-developer-edition', '-profile', profile_dir_path, url]

def browser_chrome(profile_dir_path, url=None):
    if not url:
        url = 'chrome://newtab'
    return ['google-chrome-unstable', '--no-first-run', '--disable-default-apps', '--no-default-browser-check', '--password-store=basic', '--user-data-dir=%s' % profile_dir_path, url]

def get_app_conf(menu_hint=None):
    if not menu_hint:
        menu_hint = 'browser-menu'
    else:
        menu_hint = menu_hint[:30]
        # XXX(awal): For dmenu, if hint is a proper url, we should show at least the whole host.
        #            For rofi, we can show the same prompt and show url in the description message.
    return {
            'menu': ['dmenu', '-i', '-p', menu_hint, '-sb', '#333', '-nb', '#222', '-l', '20', '-fn', 'Inconsolata'],
            'browsers': {
                'ff': browser_firefox,
                'gc': browser_chrome,
            },
    }

PROFILES_DIR = Path(Path.home(), 'browser-profiles')

def profiles_list():
    return os.listdir(PROFILES_DIR)

def get_user_choice(app_conf, items):
    menu_pipe_data = '\n'.join(items)
    user_choice = Popen(app_conf.get('menu', ['dmenu']), stdout=PIPE, stdin=PIPE).communicate(input=menu_pipe_data.encode())[0]
    return user_choice.decode().strip().split('\n')[0]

def runner():
    profiles = profiles_list()
    url = sys.argv[1] if len(sys.argv) == 2 else None
    app_conf = get_app_conf(menu_hint=url)
    choice = get_user_choice(app_conf, profiles)
    if not choice:
        return

    browser_type, _ = choice.split('-', 1)
    profile_path = Path(PROFILES_DIR, choice)
    browser_cmd = app_conf['browsers'][browser_type](str(profile_path), url)
    Popen(browser_cmd, stdout=DEVNULL, stderr=DEVNULL)

if __name__ == '__main__':
    runner()
