#!/usr/bin/env python3

import sys, shlex
from subprocess import Popen, PIPE, DEVNULL

def get_sorted_entries(cache_file_path):
    entries = []

    try:
        with open(cache_file_path) as cache_file:
            while True:
                line = cache_file.readline()
                if not line:
                    break
                line = line.rstrip('\n')

                try:
                    part_weight, data = line.split(' ', maxsplit=1)
                    weight = int(part_weight)
                except ValueError:
                    continue

                entries.append((weight, data))
    except FileNotFoundError:
        pass

    entries.sort(key=lambda entry: entry[0], reverse=True)

    return entries

def spawn_dmenu_and_get_choice(entries, dmenu_args):
    dmenu_handle = Popen(dmenu_args, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    for (_weight, data) in entries:
        dmenu_handle.stdin.write(data.encode())
        dmenu_handle.stdin.write(b'\n')
    dmenu_stdout = dmenu_handle.communicate()[0].decode().strip()
    return dmenu_stdout

def update_entries_structure_with_choice(entries, choice):
    for (index, (weight, data)) in enumerate(entries):
        if data == choice:
            new_weight = weight + 1
            entries[index] = (new_weight, data)
            return new_weight
    else:
        entries.append((0, choice))
        return 0

def write_entries(cache_file_path, entries):
    entries.sort(key=lambda entry: entry[0], reverse=True)

    with open(cache_file_path, mode='w') as cache_file:
        for entry in entries:
            cache_file.write("%d %s\n"  % entry)

def main():
    try:
        cache_file_path = sys.argv[1]
    except IndexError:
        sys.exit("Usage: dmenu-weighted <cache_file_path> [dmenu_args]")

    entries = get_sorted_entries(cache_file_path)
    choice = spawn_dmenu_and_get_choice(entries, shlex.split(sys.argv[2]) if len(sys.argv) > 2 else 'dmenu')
    if len(choice) == 0:
        exit(1)

    print(choice)
    update_entries_structure_with_choice(entries, choice)
    write_entries(cache_file_path, entries)

if __name__ == '__main__':
    main()
